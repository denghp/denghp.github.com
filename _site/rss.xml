<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0">
    <channel>
        <title>Demi Panda Blogs</title>
        <link>http:/demi-panda.com</link>
        <description>Demi 古希腊平民,人民的代名词, Panda 现实生活中高贵,权利的象征.</description>
        <managingEditor>demi-panda@126.com (demi-panda.com)</managingEditor>
        <lastBuildDate>Thu, 15 Nov 2012 00:42:31 +0800</lastBuildDate>
        <language>en</language>
        

        <item>
            <title>Generating SSH Keys</title>
            <pubDate>Wed, 14 Nov 2012 00:00:00 +0800</pubDate>
            <description>&lt;p&gt;如果你不使用推荐的HTTPS方法，可以使用SSH密钥建立安全连接您的计算机和GitHub。下面的步骤将引导您通过生成一个SSH密钥，然后添加到您的GitHub的帐户的公共密钥。&lt;/p&gt;

&lt;h3&gt;Step 1: Check for SSH keys&lt;/h3&gt;

&lt;p&gt;确认你本机的密钥,如果你有现有的密钥，则直接跳到step 4。&lt;/p&gt;

&lt;p&gt;首先，我们需要检查您的计算机上现有的SSH密钥。打开终端并运行：&lt;/p&gt;

&lt;pre id=&quot;bash&quot;&gt;
$ cd ~/.ssh
#确认&quot;.ssh&quot; 目录是否存在
&lt;/pre&gt;


&lt;p&gt;If it says &quot;No such file or directory&quot; skip to step 3. Otherwise continue to step 2.&lt;/p&gt;

&lt;h3&gt;Step 2: 备份并移除存在的SSH keys&lt;/h3&gt;

&lt;pre id=&quot;bash&quot;&gt;
$ ls
# Lists all the subdirectories in the current directory
 config  id_rsa  id_rsa.pub  known_hosts

$ mkdir key_backup
# Makes a subdirectory called &quot;key_backup&quot; in the current directory

cp id_rsa* key_backup
# Copies the id_rsa keypair into key_backup

rm id_rsa*
# Deletes the id_rsa keypair
&lt;/pre&gt;


&lt;h3&gt;Step 3: Generate a new SSH key&lt;/h3&gt;

&lt;p&gt;要生成新的SSH密钥，输入下面的代码。修改默认值，要求输入一个文件，保存密钥，只需按Enter键。&lt;/p&gt;

&lt;pre id=&quot;bash&quot;&gt;
$ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;
# Creates a new ssh key using the provided email

Generating public/private rsa key pair.
Enter file in which to save the key (/home/you/.ssh/id_rsa):
&lt;/pre&gt;


&lt;p&gt;按回车保存到默认位置，再稍等出来提示输入密码短语，输完按回车要输两遍；它用来加密私钥，也就是以后使用私钥的时候要输这个密码；&lt;/p&gt;

&lt;pre id=&quot;bash&quot;&gt;
Enter passphrase (empty for no passphrase): [Type a passphrase]
Enter same passphrase again: [Type passphrase again]
&lt;/pre&gt;


&lt;p&gt;密钥生成成功，则会提示如下：&lt;/p&gt;

&lt;pre id=&quot;bash&quot;&gt;
Your identification has been saved in /home/you/.ssh/id_rsa.
Your public key has been saved in /home/you/.ssh/id_rsa.pub.
The key fingerprint is:
01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@youremail.com
&lt;/pre&gt;


&lt;h3&gt;Step 4: 添加SSH key to GitHub&lt;/h3&gt;

&lt;pre id=&quot;bash&quot;&gt;
sudo apt-get install xclip
#Downloads and installs xclip

xclip -sel clip &lt; ~/.ssh/id_rsa.pub
# Copies the contents of the id_rsa.pub file to your clipboard
&lt;/pre&gt;


&lt;p&gt;警告：重要的是要复制的关键，完全不添加换行符或空格。值得庆幸的是xclip的命令可以很容易地完全执行此设置。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to your &lt;a href=&quot;https://github.com/settings&quot;&gt;Account Settings&lt;/a&gt;
&lt;p&gt;
&lt;img src=&quot;/media/pub/userbar-account-settings.png&quot;  alt=&quot;&quot;&gt;
&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Click &lt;a href=&quot;https://github.com/settings/ssh&quot;&gt;&amp;quot;SSH Keys&amp;quot;&lt;/a&gt; in the left sidebar
&lt;p&gt;&lt;img src=&quot;/media/pub/settings-sidebar-ssh-keys.png&quot; width=&quot;320px&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Click &amp;quot;Add SSH key&amp;quot;
&lt;p&gt;&lt;img src=&quot;/media/pub/ssh-add-ssh-key.png&quot; width=&quot;320px&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Paste your key into the &amp;quot;Key&amp;quot; field
&lt;p&gt;&lt;img src=&quot;/media/pub/ssh-key-paste.png&quot; width=&quot;320px&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Click &amp;quot;Add key&amp;quot;
&lt;p&gt;&lt;img src=&quot;/media/pub/ssh-add-key.png&quot; width=&quot;320px&quot; alt=&quot;&quot;&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;Confirm the action by entering your GitHub password&lt;/li&gt;
&lt;/ol&gt;


&lt;h3&gt;Step 5: 测试&lt;/h3&gt;

&lt;pre id=&quot;bash&quot;&gt;
$ ssh -T git@github.com
# Attempts to ssh to github
&lt;/pre&gt;


&lt;p&gt;You may see this warning:&lt;/p&gt;

&lt;pre id=&quot;bash&quot;&gt;
The authenticity of host github.com (207.97.227.239) can't be established.
RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
Are you sure you want to continue connecting (yes/no)?
&lt;/pre&gt;


&lt;p&gt;输入&quot;yes&quot;,验证的指纹相匹配.&lt;/p&gt;

&lt;pre id=&quot;bash&quot;&gt;
Hi username! You've successfully authenticated, but GitHub does not
provide shell access.
&lt;/pre&gt;

</description>
            <link>http:/demi-panda.com/2012/11/14/github-generating-ssh-keys</link>
            <guid>http:/demi-panda.com/2012/11/14/github-generating-ssh-keys</guid>
        </item>

        

        <item>
            <title>梦想旅程</title>
            <pubDate>Tue, 13 Nov 2012 00:00:00 +0800</pubDate>
            <description>&lt;p&gt;麻雀低飞百座村乡，只为了觅得更好的食物，生存的信念，足以让其放弃高傲的力量；雁掠千里云层，只为了回归温暖的巢窝，活着的意念，足以让其忍受风雨穿梭的苦涩；人行万里旅程，只为了追求心中的梦想，坚守的意志，足以让其忘却漂泊流浪的无奈与痛楚！&lt;/p&gt;

&lt;p&gt;每当有人问我：“一光年的距离有多远？”我总是苦笑不已。我深深的知道那是一种梦想的距离，当机会来时，就在你的身边，你却没有发现它，甚至它还很顽皮的在你的视线徘徊、从你的指缝悄然滑过，如白驹过隙那般错过，这是一种让人含泪苦笑的距离！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/pub/hope.png&quot; alt=&quot;Black Cube Theme&quot; class=&quot;img-right&quot; width=&quot;330px&quot; /&gt;
许多人为了追求心中的梦想，背井离乡、漂泊流浪，忍受风霜的漂洒、雨雪的吹冻；每当夜幕降临，月色朦胧、竹影婆娑，嫩叶载着旖旎的星光，唤着归根的影魂，露珠闪着晶莹的光束，飘着优美的音符……&lt;/p&gt;

&lt;p&gt;追求梦想的人们，或点燃一根烟，凝望着窗外的夜色，思念家乡路口的那棵古树，那乐趣无边、嬉戏纯真、牧童笛声的童年岁月；或躺在床上，任凭晚风挤过帘缝、月光舞着完美的旋律，甜甜的濡睡；梦里，与心爱的人携手漫步于山谷小径，萤火虫轻翔着，载着暖光而来，花儿的香味，弥漫着空气，舒适着美丽的心情……&lt;/p&gt;

&lt;p&gt;梦想的旅程，是一种辛酸的过程，追逐的路途上，布满太多的坎坷与挫折，充满了许许多多无奈的选择、寂寞与苦闷、忧愁与烦恼；奔跑的路上，也乐在其中，过程总是充满乐趣的，有梦想的人是幸福的，勇于追求梦想的人是快乐的，因为他们懂得生活，更懂得珍惜生活的真谛！&lt;/p&gt;

&lt;p&gt;忙碌的生活，往往会使我们迷失了方向，失去应有的理智，甚至忘却了思考，更变得肤浅起来；让我们活得休闲些吧，回归人性的本真，让生活的信念更加有品位，让生活充满诗意，像蝴蝶一样在阳光下翩然起舞，轻盈洒脱、自由闲适、平实自然！&lt;/p&gt;

&lt;p&gt;追逐梦想的路上，偶尔停一下脚步，放松紧绷着的心情，给自己多点空间去休闲，晨起看曙光饮露水、黄昏赏夕阳恋晚霞、夜里望月听弦思故乡，或依窗静听风雨、与心爱的人漫步原野、闻着花香听着鸟语、或登山望尽万紫千红、踏青田园小径绘色彩、心系海边沙滩细数海鸥……&lt;/p&gt;

&lt;p&gt;让我们的梦想旅程更加精彩，像花香一样，飘然四溢，四季各具风采，永驻岁月；像星月一样，迷恋着晶莹的露珠，谱写着美丽的童话，浪漫心间；像蝴蝶一样，漫步于风中，轻舞于花间，乐此不疲！这样，我们的人生才会五彩斑斓、缤纷多姿！&lt;/p&gt;
</description>
            <link>http:/demi-panda.com/2012/11/13/life-hope</link>
            <guid>http:/demi-panda.com/2012/11/13/life-hope</guid>
        </item>

        

        <item>
            <title>Google Code Prettify 实现代码高亮</title>
            <pubDate>Tue, 13 Nov 2012 00:00:00 +0800</pubDate>
            <description>&lt;p&gt;Prettify提供一个Javascript模块和CSS 文件,可以在HTML页面中显示源代码的代码高亮效果。这是用于code.google.com的脚本。&lt;/p&gt;

&lt;h3&gt;语法&lt;/h3&gt;

&lt;pre id=&quot;javascript&quot;&gt;
&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;
@*你的代码片断*@
&amp;lt;/pre&amp;gt;
&lt;/pre&gt;


&lt;h3&gt;prettify.js 的使用方法:&lt;/h3&gt;

&lt;h5&gt;1、引入 jQuery 文件和 prettify.js 文件&lt;/h5&gt;

&lt;pre id=&quot;javascript&quot;&gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;jquery-1.6.1.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src=&amp;quot;prettify.js&amp;quot; type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/pre&gt;


&lt;h5&gt;2、调用 prettify.js 实现代码高亮&lt;/h5&gt;

&lt;p&gt;在 body 标签上添加调用方法，如下：&lt;/p&gt;


&lt;pre id=&quot;javascript&quot;&gt;
&amp;lt;body onload=&amp;quot;prettyPrint()&amp;quot;&amp;gt;
&amp;lt;/body&amp;gt;
&lt;/pre&gt;


&lt;p&gt;将你需要高亮显示的代码片断放在&amp;lt;pre&amp;gt;标记里，如下：&lt;/p&gt;


&lt;pre id=&quot;javascript&quot;&gt;
&amp;lt;pre class=&amp;quot;prettyprint&amp;quot;&amp;gt;
@*你的代码片断*@
&amp;lt;/pre&amp;gt;
&lt;/pre&gt;


&lt;h3&gt;使用 jQuery 小技巧实现优化&lt;/h3&gt;

&lt;p&gt;上述方法可以实现代码的高亮，但每次手动为&amp;lt;pre&amp;gt;标签添加&amp;quot;prettyprint&amp;quot;类，显示有些麻烦。使用下边的代码片断来解决这个问题并替换掉 body 的&amp;quot;onload&amp;quot;的事件，实现分离：&lt;/p&gt;


&lt;pre class=&quot;prettyprint&quot; id=&quot;javascript&quot;&gt;
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;
$(window).load(function(){
    $(&amp;quot;pre&amp;quot;).addClass(&amp;quot;prettyprint&amp;quot;);
    prettyPrint();
})
&amp;lt;/script&amp;gt;
&lt;/pre&gt;


&lt;p&gt;到这我们应该已经成功使用 prettify.js 实现了代码的高亮显示，为了提高页面加载速度，我们应该将引用的 js 文件放置在底部，大家可以参考下本站的放置方法。&lt;/p&gt;


&lt;h3&gt;DEMO JAVA代码高亮显示&lt;/h3&gt;

&lt;pre class=&quot;prettyprint linenums&quot; id=&quot;java&quot;&gt;
package foo;

import java.util.Iterator;

/**
 * the fibonacci series implemented as an Iterable.
 */
public final class Fibonacci implements Iterable&amp;lt;Integer&gt; {
  /** the next and previous members of the series. */
  private int a = 1, b = 1;

  @Override
  public Iterator&amp;lt;Integer&gt; iterator() {
    return new Iterator&amp;lt;Integer&gt;() {
      /** the series is infinite. */
      public boolean hasNext() { return true; }
      public Integer next() {
        int tmp = a;
        a += b;
        b = tmp;
        return a;
      }
      public void remove() { throw new UnsupportedOperationException(); }
    };
  }

  /**
   * the n&amp;lt;sup&gt;th&amp;lt;/sup&gt; element of the given series.
   * @throws NoSuchElementException if there are less than n elements in the
   *   given Iterable's {@link Iterable#iterator iterator}.
   */
  public static &amp;lt;T&gt;
  T nth(int n, Iterable&amp;lt;T&gt; iterable) {
    Iterator&amp;lt;? extends T&gt; it = iterable.iterator();
    while (--n &gt; 0) {
      it.next();
    }
    return it.next();
  }

  public static void main(String[] args) {
    System.out.print(nth(10, new Fibonacci()));
  }
}
&lt;/pre&gt;



</description>
            <link>http:/demi-panda.com/2012/11/13/google-code-prettify</link>
            <guid>http:/demi-panda.com/2012/11/13/google-code-prettify</guid>
        </item>

        

        <item>
            <title>SSH免密码远程登录设置</title>
            <pubDate>Mon, 12 Nov 2012 00:00:00 +0800</pubDate>
            <description>&lt;p&gt;由于这几天需要写一个线上日志查询的小系统。打算使用ssh远程登录进行相关log文件的操作。
为了操作的方便，就找了一个ssh的java实现 jsch http://www.jcraft.com/jsch/
然后写了一些代码进行测试。
后来发现实际环境中，需要通过 public key 的方式进行ssh的登录验证。
所以我在测试环境上需要配置下。&lt;/p&gt;

&lt;p&gt;这里写一下配置的过程。
假设有A机器和B机器，A机器通过非密码的方式登录B机器，&lt;/p&gt;

&lt;h3&gt;1.生成密钥对&lt;/h3&gt;

&lt;p&gt;这个时候我们来到A机器进行相关操作
一般情况下，我们的公钥私钥都是放在 ~/.ssh目录下的
如果没有的话，需要自己生成，&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;luke@luke-desktop:~/.ssh&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ssh-keygen
Generating public/private rsa key pair.
Enter file in which to save the key &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;/home/luke/.ssh/id_rsa&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
Enter passphrase &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;empty &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;no passphrase&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
Enter same passphrase again:
Your identification has been saved in /home/luke/.ssh/id_rsa.
Your public key has been saved in /home/luke/.ssh/id_rsa.pub.
The key fingerprint is:
9a:34:fd:c6:9f:3d:81:f5:be:f1:e5:df:a1:25:bb:2c luke@luke-desktop
The key&lt;span class=&quot;err&quot;&gt;&amp;#39;&lt;/span&gt;s randomart image is:
+--&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; RSA 2048&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;----+
|                 |
|                 |
|                 |
|       .      .  |
|      o S    o . |
|     . + o  . . .|
|      o   +  . *.|
|         . E.o*.B|
|            +&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;ooB|
+-----------------+
luke@luke-desktop:~/.ssh&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls
id_rsa  id_rsa.pub  known_hosts
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;其中id_rsa为私钥 id_rsa.pub为公钥，&lt;/p&gt;

&lt;p&gt;至于known_hosts文件，它是用来保存以前远程登录过的主机的公钥的&lt;/p&gt;

&lt;h3&gt;2.在远程机器中添加本地机器的公钥&lt;/h3&gt;

&lt;p&gt;现在我们需要做的是将A机器的公钥加入到B机器的authorized_keys文件中（可以直接拷贝粘贴，如果 authorized_keys文件不存在的话，就在B机器中新建~/.ssh/authorized_keys），然后开启开启B机器的 PubkeyAuthentication的选项&lt;/p&gt;

&lt;p&gt;vi /etc/ssh/sshd_config &lt;br/&gt;
设置下面的选项：&lt;br/&gt;
PubkeyAuthentication yes&lt;br/&gt;
重启sshd   service sshd restart&lt;/p&gt;

&lt;p&gt;这个时候就可以在A机器上ssh登录B 机器了，现在不需要输入用户对应的linux密码了，但是需要输入创建私钥的时候所输入的passphrase，但是这个密码无须在网络上进行传输了。&lt;/p&gt;

&lt;h3&gt;3.使用ssh-add&lt;/h3&gt;

&lt;p&gt;我们可以通过ssh-add命令将私钥的密码交给ssh-agent进行管理，这样我们登录远程机器的时候，就会直接使用缓存起来的passphrase，而不会让你每次手动的输入。&lt;/p&gt;

&lt;h3&gt;4.其他&lt;/h3&gt;

&lt;p&gt;一开始发现，本机登录远程机器在登录的时候相当慢，后来发现和两个选项有关&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#GSSAPIAuthentication yes&lt;/span&gt;
UseDNS no
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;还有一个有点悲剧的事情就是我为了重新验证设置的正确性，将本地的密钥对全部删除后，重新生成了一对，结果发现服务器端被我限死成公钥方式的登录，我一想，这下可彻底的悲剧了，登录不了阿。不过灵机一动，翻出以前的一个邮件，有一个系统急救的方法，就是通过一个跳板机器，然后vnc直接连如XEN虚拟机，然后在公钥验证的下面将密码验证方式设置为yes，重启sshd服务，然后重启从本地登录，重复上面的设置过程，恩，虚惊一场阿，不过下次修改删除操作还是先做好备份才靠谱。&lt;/p&gt;
</description>
            <link>http:/demi-panda.com/2012/11/12/using-ssh-for-passwordless-remote-login</link>
            <guid>http:/demi-panda.com/2012/11/12/using-ssh-for-passwordless-remote-login</guid>
        </item>

        

        <item>
            <title>svn 文件状态含义</title>
            <pubDate>Mon, 12 Nov 2012 00:00:00 +0800</pubDate>
            <description>&lt;p&gt;打印工作拷贝文件和目录的状态。如果没有参数，只会打印本地修改的项目(不会访问版本库)，使用--show-updates选项，会添加工作修订版本和服务器过期信息。使用--verbose会打印每个项目的完全修订版本信息。
输出的前六列都是一个字符宽，每一列给出了工作拷贝项目的每一方面的信息。
第一列指出一个项目的是添加、删除还是其它的修改&lt;/p&gt;

&lt;h3&gt;语法&lt;/h3&gt;

&lt;p&gt;svn status [PATH...]&lt;/p&gt;

&lt;h3&gt;详细介绍&lt;/h3&gt;

&lt;h6&gt;' ' item&lt;/h6&gt;

&lt;p&gt;没有修改。&lt;/p&gt;

&lt;h6&gt;'A' item&lt;/h6&gt;

&lt;p&gt;文件、目录或是符号链item预定加入到版本库。&lt;/p&gt;

&lt;h6&gt;'C' item&lt;/h6&gt;

&lt;p&gt;文件item发生冲突，在从服务器更新时与本地版本发生交迭，在你提交到版本库前，必须手工的解决冲突。&lt;/p&gt;

&lt;h6&gt;'D' item&lt;/h6&gt;

&lt;p&gt;文件、目录或是符号链item预定从版本库中删除。&lt;/p&gt;

&lt;h6&gt;'M' item&lt;/h6&gt;

&lt;p&gt;文件item的内容被修改了。&lt;/p&gt;

&lt;h6&gt;'R' item&lt;/h6&gt;

&lt;p&gt;文件、目录或是符号链item预定将要替换版本库中的item，这意味着这个对象首先要被删除，另外一个同名的对象将要被添加，所有的操作发生在一个修订版本。&lt;/p&gt;

&lt;h6&gt;'X' item&lt;/h6&gt;

&lt;p&gt;目录没有版本化，但是与Subversion的外部定义关联，关于外部定义，可以看“外部定义”一节。&lt;/p&gt;

&lt;h6&gt;'?' item&lt;/h6&gt;

&lt;p&gt;文件、目录或是符号链item不在版本控制之下，你可以通过使用svn status的--quiet（-q）参数或父目录的svn:ignore属性忽略这个问题，关于忽略文件的使用，见“svn:ignore”一节。&lt;/p&gt;

&lt;h6&gt;'!' item&lt;/h6&gt;

&lt;p&gt;文件、目录或是符号链item在版本控制之下，但是已经丢失或者不完整，这可能因为使用非Subversion命令删除造成的，如果是一个目录，有可能是检出或是更新时的中断造成的，使用svn update可以重新从版本库获得文件或者目录，也可以使用svn revert file恢复原来的文件。&lt;/p&gt;

&lt;h6&gt;'~' item&lt;/h6&gt;

&lt;p&gt;文件、目录或是符号链item在版本库已经存在，但你的工作拷贝中的是另一个。举一个例子，你删除了一个版本库的文件，新建了一个在原来的位置，而且整个过程中没有使用svn delete或是svn add。&lt;/p&gt;

&lt;h6&gt;'I' item&lt;/h6&gt;

&lt;p&gt;文件、目录或是符号链item不在版本控制下，Subversion已经配置好了会在svn add、svn import和svn status命令忽略这个文件，关于忽略文件，见“svn:ignore”一节。注意，这个符号只会在使用svn status的参数--no-ignore时才会出现—否则这个文件会被忽略且不会显示！&lt;/p&gt;

&lt;h6&gt;'L' item&lt;/h6&gt;

&lt;p&gt;项目已经锁定。
第四列只在预定包含历史添加的项目出现。&lt;/p&gt;

&lt;h6&gt;'+' item&lt;/h6&gt;

&lt;p&gt;历史预定要伴随提交。
第五列只在项目跳转到相对于它的父目录时出现(见“使用分支(http://i18n-zh.googlecode.com/svn/www/svnbook-1.4/svn.branchmerge.switchwc.html)”一节)。&lt;/p&gt;

&lt;h6&gt;'S' item&lt;/h6&gt;

&lt;p&gt;  项目已经转换。&lt;/p&gt;

&lt;h6&gt;' ' item&lt;/h6&gt;

&lt;p&gt;  当使用--show-updates，文件没有锁定。如果不使用--show-updates，这意味着文件在工作拷贝被锁定。&lt;/p&gt;

&lt;h6&gt;'K' item&lt;/h6&gt;

&lt;p&gt;  文件锁定在工作拷贝。&lt;/p&gt;

&lt;h6&gt;'O' item&lt;/h6&gt;

&lt;p&gt;  文件被另一个工作拷贝的另一个用户锁定，只有在使用--show-updates时显示。&lt;/p&gt;

&lt;h6&gt;'T' item&lt;/h6&gt;

&lt;p&gt;  文件锁定在工作拷贝，但是锁定被“窃取”而不可用。文件当前锁定在版本库，只有在使用--show-updates时显示。&lt;/p&gt;

&lt;h6&gt;'B' item&lt;/h6&gt;

&lt;p&gt;  文件锁定在工作拷贝，但是锁定被“破坏”而不可用。文件当前锁定在版本库，只有在使用--show-updates时显示。
  过期信息出现在第七列(只在使用--show-updates选项时出现)。&lt;/p&gt;

&lt;h6&gt;'*' 在服务器这个项目有了新的修订版本。&lt;/h6&gt;

&lt;p&gt;  余下的字段是可变得宽度且使用空格分隔，如果使用--show-updates或--verbose选项，工作修订版本是下一个字段。
  如果传递--verbose选项，最后提交的修订版本和最后的提交作者会在后面显示。
  工作拷贝路径永远是最后一个字段，所以它可以包括空格。&lt;/p&gt;
</description>
            <link>http:/demi-panda.com/2012/11/12/first-subversion</link>
            <guid>http:/demi-panda.com/2012/11/12/first-subversion</guid>
        </item>

        

        <item>
            <title>2012年的第一场雪</title>
            <pubDate>Sun, 04 Nov 2012 00:00:00 +0800</pubDate>
            <description>&lt;p&gt;今天,2012年北京的第一场雪来的比往年早,40小时雨雪降水超历史,也在今天俺开始科目二实车训练啦，心情比较激动，不惧怕风雨雪。&lt;/p&gt;

&lt;p&gt;经常在网上浏览别人的博客,自己也在网上有写过自己的博客,但是总感觉不是很清新，让人愉快的感觉。
&lt;img src=&quot;/media/pub/2012-11-04.png&quot; alt=&quot;Black Cube Theme&quot; class=&quot;img-right&quot; width=&quot;330px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;于是乎在了解到可以在github上搭建个人博客，采用的是&lt;a href=&quot;https://github.com/mojombo/jekyll&quot;&gt;Jekyll&lt;/a&gt;模板搭建的。&lt;/p&gt;

&lt;p&gt;Jekyll是一个博客生成引擎，可以将markdown写成的博客生成静态的HTML博客。 当然Jekyll提供了一些的辅助工具，支持模板，可以辅助你生成分类和标签页。&lt;/p&gt;

&lt;p&gt;Github Page是Github的一个非常好的服务，免费，可以绑定域名。&lt;/p&gt;

&lt;p&gt;博客主要是以IT技术为主，然后会有互联网、生活、社会、音乐、电影、娱乐等分类。&lt;/p&gt;
</description>
            <link>http:/demi-panda.com/2012/11/04/first-post</link>
            <guid>http:/demi-panda.com/2012/11/04/first-post</guid>
        </item>

        

        <item>
            <title>Jenkins CI Used For Mac App Dev</title>
            <pubDate>Tue, 14 Jun 2011 00:00:00 +0800</pubDate>
            <description>&lt;h3&gt;介绍&lt;/h3&gt;

&lt;p&gt;在开发一个软件的过程中，测试或者项目经理经常需要得到软件的最新版本。&lt;br/&gt;
如果每次都是开发手动编译给他们，有点浪费时间，也不科学。&lt;br/&gt;
所以这个任务可以交给计算机来作，每当你有代码提交的时候或者每当系统定期检测到有代码更新的时候，系统自动进行编译打包，并可以通过浏览器来下载最新的软件版本。&lt;br/&gt;
你也许会说，这个不是持续集成的一部分么？哈哈，的确是。&lt;/p&gt;

&lt;p&gt;这里使用的CI（持续集成）软件是 Jenkins CI，以前叫做Hudson ci后来迫于oracle的相关政策，年初的时候改名了。&lt;a href=&quot;https://github.com/jenkinsci&quot;&gt;https://github.com/jenkinsci&lt;/a&gt;  这里是其代码。 &lt;br/&gt;
其实CI囊括的东西远远不止自动编译了，还可以有代码提交后的自动化测试，生成各种测试报告，自动打包部署等等。&lt;/p&gt;

&lt;h3&gt;安装配置及使用&lt;/h3&gt;

&lt;p&gt;这里要说的是开发一个mac软件，想要使用Jenkins进行定期编译打包应该怎么做。&lt;br/&gt;
首先你得有一台mac server或者一台普通的mac机器做服务器。&lt;/p&gt;

&lt;p&gt;下载Jenkins &lt;a href=&quot;http://jenkins-ci.org/&quot;&gt;http://jenkins-ci.org/&lt;/a&gt; 可以直接下载mac系统的安装包。&lt;br/&gt;
安装好了之后，会在Applications目录下多一个Jenkins的目录，里面就一个war包，jenkins.war&lt;br/&gt;
这个时候你可以启动Jenkins服务了&lt;br/&gt;
进去/Applications/Jenkins目录，运行 java -jar jenkins.war –httpPort=9080 –ajp13Port=9009   （当然你可以通过nohup的方式使得其在后台运行）你也可以不指定http和ajp的端口，使用默认的值，默认的http端口是8080&lt;br/&gt;
启动好了之后就可以通过浏览器 访问&lt;a href=&quot;http://localhost:9080/&quot;&gt;http://localhost:9080/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;系统的一些设置都在 Manage Jenkins 选项中，你可以在插件管理的界面中选择安装一些插件。&lt;br/&gt;
比如帐号权限管理的插件，Git支持的插件，这里就先不要权限管理了。直接安装一个git插件。&lt;/p&gt;

&lt;p&gt;然后进入主界面，新建一个Job，&lt;br/&gt;
勾选第一个Build a free-style software project，下一步中填写项目描述，源码管理处选择Git，然后填写Git库地址以及分支
Build Triggers 可以选择定期执行
Build这边，由于是Mac项目，不像Java项目可以有Ant或者Maven这些三方的构建工具。
命令行编译XCode的项目只能通过XCode自带的命令行工具来，所以只能选shell脚本的方式，这边的输入框中可以写脚本，也可以将具体的脚本写在项目中随项目一起提交到git库中，这里只负责一些环境变量的设置以及脚本的调用。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;REVISION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;${GIT_COMMIT:0:7}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;FOLDER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;#${BUILD_NUMBER}.Rev.${REVISION}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ARCHIVE_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/Users/Luke/Test/${FOLDER}&amp;quot;&lt;/span&gt;
mkdir -p &lt;span class=&quot;s2&quot;&gt;&amp;quot;$ARCHIVE_DIR&amp;quot;&lt;/span&gt;
Scripts/build.sh CONFIGURATION TARGET APPNAME
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;xcodebuild的具体用法可以参考官方的文档&lt;/p&gt;

&lt;p&gt;获取脚本传递过来的参数并算好项目的路径以及编译之后app的路径&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;xcodebuild -target &lt;span class=&quot;s2&quot;&gt;&amp;quot;${TARGET}&amp;quot;&lt;/span&gt; -configuration &lt;span class=&quot;s2&quot;&gt;&amp;quot;${CONFIGURATION}&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;编译成功之后，进行zip打包并移到ARCHIVE_DIR中&lt;br/&gt;
Post-build Actions 就是build结束后的后继操作，比如可以将编译结果邮件发送给相应的人员。&lt;/p&gt;
</description>
            <link>http:/demi-panda.com/2011/06/14/jenkins-ci-used-for-mac-app-dev</link>
            <guid>http:/demi-panda.com/2011/06/14/jenkins-ci-used-for-mac-app-dev</guid>
        </item>

        

        <item>
            <title>Check Memory With Cron Job</title>
            <pubDate>Thu, 13 Jan 2011 00:00:00 +0800</pubDate>
            <description>&lt;p&gt;更新:crontab 默认的环境变量比较少,所以你需要设置自己的运行程序所需要的环境变量&lt;/p&gt;

&lt;p&gt;手头维护着一个蛮旧的系统，是SUN之前开发，时间一长就偶尔会内存溢出，占内存达百分之八十多，苦于又没有源码，所以今天写了个小脚本用来检测，发现情况不对狠狠的杀掉重启。&lt;br/&gt;
使用crontab进行配置，每隔2分钟进行一次检查&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;crontab -e  
*/2 * * * * sh /home/admin/checkmem.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;checkmem的脚本为&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:java的bin:xxxx
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/xxx/java
&lt;span class=&quot;nv&quot;&gt;javaMem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;top -b -n 1|grep java|awk &lt;span class=&quot;s1&quot;&gt;&amp;#39;{print $10}&amp;#39;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;date +&lt;span class=&quot;s2&quot;&gt;&amp;quot;%Y-%m-%d %H:%M:%S&amp;quot;&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$DATE $javaMem&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /home/admin/checkmem.log

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$javaMem&amp;gt;55.0&amp;quot;&lt;/span&gt;|bc&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; -eq 1 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;   &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;restart tomcat&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; /home/admin/checkmem.log
  killall -9 java
  nohup sh /home/admin/apache-tomcat-6.0.29/bin/startup.sh &amp;amp; &amp;gt;/dev/null
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;脚本每次检查都会将结果记录到日志文件中，方便查看。&lt;/p&gt;
</description>
            <link>http:/demi-panda.com/2011/01/13/check-memory-with-cron-job</link>
            <guid>http:/demi-panda.com/2011/01/13/check-memory-with-cron-job</guid>
        </item>

        

        <item>
            <title>Linux培训笔记</title>
            <pubDate>Sat, 31 Jul 2010 00:00:00 +0800</pubDate>
            <description>&lt;p&gt;上周末，参加了一个关于Linux的培训，感觉还不错，以前一些比较模糊的概念渐渐的变得清晰了。&lt;/p&gt;

&lt;h3&gt;一.Shell相关&lt;/h3&gt;

&lt;p&gt;shell命令在进行运行前都先进行一些必要的替换&lt;/p&gt;

&lt;p&gt;echo $PATH 变量替换&lt;br/&gt;
echo * 通配符,比如这里的*,代表当前目录中的所有文件&lt;br/&gt;
反引号&lt;code&gt;替换反引号中的命令为其输出 echo&lt;/code&gt;ls`&lt;br/&gt;
alias替换&lt;br/&gt;
shell外部命令调用，fork子进程，和父进程一模一样，在子进程中exec，并将子进程替换，并只继承原来的环境变量，shell进行wait等待子进程结束。&lt;br/&gt;
没有进行export的变量，shell脚本是看不到的&lt;/p&gt;

&lt;p&gt;unix 中，任何命令尽量做成外部命令。&lt;/p&gt;

&lt;p&gt;kill 外部命令内部化，shell一看是kill，就不去fork子进程，就直接帮你做了。&lt;/p&gt;

&lt;p&gt;ELF(Executable and Linkable Format)即可执行连接文件格式，脚本文件u+s是没有用的。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;  
&lt;span class=&quot;c&quot;&gt;#！脚本文件 #！是给内核看的，但是解释器不需要看#！，所以在脚本中#为注解  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;二.内存管理相关&lt;/h3&gt;

&lt;p&gt;用过windows的同学很容易会把虚拟内存理解错了，windows中所谓的虚拟内存其实应该叫做交换内存。&lt;/p&gt;

&lt;p&gt;什么情况下我们才应该认为计算机系统内存不够了呢？&lt;/p&gt;

&lt;p&gt;内存频繁换入换出说明内存不够&lt;/p&gt;

&lt;p&gt;内核会将空闲的部分内存用来做cache和buffer&lt;br/&gt;
cache多 buffer少&lt;/p&gt;

&lt;p&gt;overcommit(过提交) 容易造成OOM killer,可以关闭过提交&lt;/p&gt;

&lt;p&gt;多进程原理，中断处理，保存现场，进到内核，恢复现场的时候内核里可能有很多现场，内核就选一个恢复。信号的实现就是基于中断。&lt;/p&gt;

&lt;h3&gt;三.文件系统相关&lt;/h3&gt;

&lt;p&gt;一些标识&lt;/p&gt;

&lt;p&gt;-普通文件&lt;br/&gt;
d 目录&lt;br/&gt;
l 链接文件&lt;br/&gt;
c 字符文件&lt;br/&gt;
b 块文件 &lt;br/&gt;
p 管道文件 &lt;br/&gt;
s socket文件&lt;/p&gt;

&lt;p&gt;u+s 执行命令的时候，赋予命令宿主的权限&lt;/p&gt;

&lt;p&gt;bitmap，用来记录文件系统的容量使用情况&lt;br/&gt;
块位图，索引节点位图。&lt;/p&gt;

&lt;p&gt;硬连接 两个文件项指向同一个inode&lt;br/&gt;
符号链接 一个符号链接就是一个文本文件，存了一个字符串 把符号连接的内容替换其，形成一个新的路径。符号连接中写绝对路径。&lt;/p&gt;
</description>
            <link>http:/demi-panda.com/2010/07/31/advanced-linux-notes</link>
            <guid>http:/demi-panda.com/2010/07/31/advanced-linux-notes</guid>
        </item>

        

        <item>
            <title>ConcurrentHashMap原理分析</title>
            <pubDate>Wed, 28 Jul 2010 00:00:00 +0800</pubDate>
            <description>&lt;h2&gt;一.Java并发基础&lt;/h2&gt;

&lt;p&gt;当一个对象或变量可以被多个线程共享的时候，就有可能使得程序的逻辑出现问题。
在一个对象中有一个变量i=0，有两个线程A，B都想对i加1，这个时候便有问题显现出来，关键就是对i加1的这个过程不是原子操作。要想对i进行递增，第一步就是获取i的值，当A获取i的值为0，在A将新的值写入A之前，B也获取了A的值0，然后A写入，i变成1，然后B也写入i，i这个时候依然是1.
当然java的内存模型没有上面这么简单，在Java Memory Model中，Memory分为两类，main memory和working memory，main memory为所有线程共享，working memory中存放的是线程所需要的变量的拷贝（线程要对main memory中的内容进行操作的话，首先需要拷贝到自己的working memory，一般为了速度，working memory一般是在cpu的cache中的）。volatile的变量在被操作的时候不会产生working memory的拷贝，而是直接操作main memory，当然volatile虽然解决了变量的可见性问题，但没有解决变量操作的原子性的问题，这个还需要synchronized或者CAS相关操作配合进行。&lt;/p&gt;

&lt;p&gt;多线程中几个重要的概念:&lt;/p&gt;

&lt;h4&gt;可见性&lt;/h4&gt;

&lt;p&gt;也就说假设一个对象中有一个变量i，那么i是保存在main memory中的，当某一个线程要操作i的时候，首先需要从main memory中将i 加载到这个线程的working memory中，这个时候working memory中就有了一个i的拷贝，这个时候此线程对i的修改都在其working memory中，直到其将i从working memory写回到main memory中，新的i的值才能被其他线程所读取。从某个意义上说，可见性保证了各个线程的working memory的数据的一致性。
可见性遵循下面一些规则：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;当一个线程运行结束的时候，所有写的变量都会被flush回main memory中。&lt;/li&gt;
&lt;li&gt;当一个线程第一次读取某个变量的时候，会从main memory中读取最新的。&lt;/li&gt;
&lt;li&gt;volatile的变量会被立刻写到main memory中的，在jsr133中，对volatile的语义进行增强，后面会提到&lt;/li&gt;
&lt;li&gt;当一个线程释放锁后，所有的变量的变化都会flush到main memory中，然后一个使用了这个相同的同步锁的进程，将会重新加载所有的使用到的变量，这样就保证了可见性。&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;原子性&lt;/h4&gt;

&lt;p&gt;还拿上面的例子来说，原子性就是当某一个线程修改i的值的时候，从取出i到将新的i的值写给i之间不能有其他线程对i进行任何操作。也就是说保证某个线程对i的操作是原子性的，这样就可以避免数据脏读。
通过锁机制或者CAS（Compare And Set 需要硬件CPU的支持）操作可以保证操作的原子性。&lt;/p&gt;

&lt;h4&gt;有序性&lt;/h4&gt;

&lt;p&gt;假设在main memory中存在两个变量i和j，初始值都为0，在某个线程A的代码中依次对i和j进行自增操作（i，j的操作不相互依赖），&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;由于，所以i,j修改操作的顺序可能会被重新排序。那么修改后的ij写到main memory中的时候，顺序可能就不是按照i，j的顺序了，这就是所谓的reordering，在单线程的情况下，当线程A运行结束的后i，j的值都加1了，在线程自己看来就好像是线程按照代码的顺序进行了运行（这些操作都是基于as-if-serial语义的），即使在实际运行过程中，i，j的自增可能被重新排序了，当然计算机也不能帮你乱排序，存在上下逻辑关联的运行顺序肯定还是不会变的。但是在多线程环境下，问题就不一样了，比如另一个线程B的代码如下&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;按照我们的思维方式，当j为1的时候那么i肯定也是1，因为代码中i在j之前就自增了，但实际的情况有可能当j为1的时候i还是为0。这就是reordering产生的不好的后果，所以我们在某些时候为了避免这样的问题需要一些必要的策略，以保证多个线程一起工作的时候也存在一定的次序。JMM提供了happens-before 的排序策略。这样我们可以得到多线程环境下的as-if-serial语义。
这里不对happens-before进行详细解释了,详细的请看这里http://www.ibm.com/developerworks/cn/java/j-jtp03304/，这里主要讲一下volatile在新的java内存模型下的变化，在jsr133之前，下面的代码可能会出现问题&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// In Thread A&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;configOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;configText&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;readConfigFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fileName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;processConfigOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;initialized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// In Thread B&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initialized&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// use configOptions&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;jsr133之前，虽然对 volatile 变量的读和写不能与对其他 volatile 变量的读和写一起重新排序，但是它们仍然可以与对 nonvolatile 变量的读写一起重新排序，所以上面的Thread A的操作，就可能initialized变成true的时候，而configOptions还没有被初始化，所以initialized先于configOptions被线程B看到，就产生问题了。&lt;/p&gt;

&lt;p&gt;JSR 133 Expert Group 决定让 volatile 读写不能与其他内存操作一起重新排序，新的内存模型下，如果当线程 A 写入 volatile 变量 V 而线程 B 读取 V 时，那么在写入 V 时，A 可见的所有变量值现在都可以保证对 B 是可见的。&lt;/p&gt;

&lt;p&gt;结果就是作用更大的 volatile 语义，代价是访问 volatile 字段时会对性能产生更大的影响。这一点在ConcurrentHashMap中的统计某个segment元素个数的count变量中使用到了。&lt;/p&gt;

&lt;h2&gt;二.线程安全的HashMap&lt;/h2&gt;

&lt;p&gt;什么时候我们需要使用线程安全的hashmap呢，比如一个hashmap在运行的时候只有读操作，那么很明显不会有问题，但是当涉及到同时有改变也有读的时候，就要考虑线程安全问题了，在不考虑性能问题的时候，我们的解决方案有Hashtable或者Collections.synchronizedMap(hashMap)，这两种方式基本都是对整个hash表结构做锁定操作的，这样在锁表的期间，别的线程就需要等待了，无疑性能不高。&lt;/p&gt;

&lt;h2&gt;三.ConcurrentHashMap实现原理&lt;/h2&gt;

&lt;p&gt;数据结构
ConcurrentHashMap的目标是实现支持高并发、高吞吐量的线程安全的HashMap。当然不能直接对整个hashtable加锁，所以在ConcurrentHashMap中，数据的组织结构和HashMap有所区别。&lt;/p&gt;

&lt;p&gt;一个ConcurrentHashMap由多个segment组成，每一个segment都包含了一个HashEntry数组的hashtable，
每一个segment包含了对自己的hashtable的操作，比如get，put，replace等操作，这些操作发生的时候，对自己的hashtable进行锁定。由于每一个segment写操作只锁定自己的hashtable，所以可能存在多个线程同时写的情况，性能无疑好于只有一个hashtable锁定的情况。&lt;/p&gt;

&lt;p&gt;源码分析
在ConcurrentHashMap的remove，put操作还是比较简单的，都是将remove或者put操作交给key所对应的segment去做的，所以当几个操作不在同一个segment的时候就可以并发的进行。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;segmentFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;而segment中的remove操作除了加锁之外和HashMap中的remove操作基本无异。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;        &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         * Remove; match on key only if value null, else match both.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;         */&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;HashEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tab&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;HashEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;HashEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

                &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;oldValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// All entries following removed node can stay&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// in list, but all preceding ones need to be&lt;/span&gt;
                        &lt;span class=&quot;c1&quot;&gt;// cloned.&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;HashEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newFirst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HashEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;newFirst&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                                                          &lt;span class=&quot;n&quot;&gt;newFirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;tab&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newFirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// write-volatile&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;上面的代码中关于volatile类型的变量count值得一提，这里充分利用了Java 5中对volatile语义的增强，count = c的操作必须在modCount，table等操作的后面，这样才能保证这些变量操作的可见性。
Segment类继承于ReentrantLock，主要是为了使用ReentrantLock的锁，ReentrantLock的实现比
synchronized在多个线程争用下的总体开销小。
put操作和remove操作类似。&lt;/p&gt;

&lt;p&gt;接下来我们来看下get操作。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;segmentFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;也是使用了对应的segment的get&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;       &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// read-volatile&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;HashEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getFirst&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readValueUnderLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// recheck&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;上面的代码中，一开始就对volatile变量count进行了读取比较，这个还是java5对volatile语义增强的作用，这样就可以获取变量的可见性。所以count != 0之后，我们可以认为对应的hashtable是最新的，当然由于读取的时候没有加锁，在get的过程中，可能会有更新。当发现根据key去找元素的时候，但发现找得的key对应的value为null，这个时候可能会有其他线程正在对这个元素进行写操作，所以需要在使用锁的情况下在读取一下value，以确保最终的值。&lt;/p&gt;

&lt;p&gt;其他相关涉及读取的操作也都类似。&lt;/p&gt;
</description>
            <link>http:/demi-panda.com/2010/07/28/concurrenthashmap</link>
            <guid>http:/demi-panda.com/2010/07/28/concurrenthashmap</guid>
        </item>

        

        <item>
            <title>Tomcat升级</title>
            <pubDate>Tue, 27 Jul 2010 00:00:00 +0800</pubDate>
            <description>&lt;p&gt;之前tomcat使用的版本是5.5.26 ，由于存在DDOS攻击的漏洞，所以需要进行升级，
本来打算升级到5.5.30的，无奈发现部署了新版本的tomcat，F5就直接认为其不可用，
经过在所升级的机器上使用links之类的工具直接访问localhost，发现web应用是正常的。
这个时候把目光转移到F5上，应该和F5的健康检查有一定的关系。&lt;/p&gt;

&lt;p&gt;第二天，找到相应的网络工程师。一台开起tomcat5.5.30 另一台不变，果真发现5.5.30的机器被F5认为不可用。
通过求同寻异的方法，最后定位到一个通过openssl s_client -host host -port port（应用限制使用https方式访问）然后GET某个标志应用状态的页面来检查的策略上。&lt;/p&gt;

&lt;p&gt;通过linux下测试果然发现5.5.30上GET的结果为：&lt;/p&gt;

&lt;p&gt;GET /xxx/xxx/status
HTTP/1.1 400 Bad Request
Server: Apache-Coyote/1.1
Transfer-Encoding: chunked
Date: Mon, 26 Jul 2010 19:39:47 GMT
Connection: close&lt;/p&gt;

&lt;p&gt;找到原因了，怎么办呢？为了快速解决问题，所以尝试了下6版本的安全版本6.0.28 发现GET /xxx/xxx/status的结果是OK的，于是就直接升级到这个版本。
今天再回过头来看之前5.5.30的问题的原因。&lt;/p&gt;

&lt;p&gt;发现当指定为 HTTP/1.0的协议是可以的&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;GET /xxx/xxx/status HTTP/1.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;两次回车&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Length: 2
Date: Mon, 26 Jul 2010 19:46:46 GMT
Connection: close

OKclosed
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;如果指定HTTP/1.1 的话
按一次回车不会显示结果 ，如果这个时候输入host：123.343.343.43之类的host信息再回车的话，可以获取结果，但是发现连接没有关闭还可以继续发送GET请求。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;GET /xxx/xxx/status HTTP/1.1
host:127.0.0.1

HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Length: 2
Date: Mon, 26 Jul 2010 19:48:55 GMT

OK
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;由于没有精力去调试tomcat的源码，而且找官方文档也没发现什么信息。唉。&lt;/p&gt;

&lt;p&gt;还有tomcat在各个版本以及各个平台下的ssl的配置可能会存在各种问题
比如通过https访问的时候显示ssl_error_rx_record_too_long的错误或者显示连接被断开。
所以配置Connector 的时候，不行的话尝试添加protocol=”org.apache.coyote.http11.Http11Protocol”和SSLEnabled=”true”等参数。&lt;/p&gt;
</description>
            <link>http:/demi-panda.com/2010/07/27/tomcat-upgrade</link>
            <guid>http:/demi-panda.com/2010/07/27/tomcat-upgrade</guid>
        </item>

        

        <item>
            <title>Java HashMap 核心源码解读</title>
            <pubDate>Thu, 22 Jul 2010 00:00:00 +0800</pubDate>
            <description>&lt;p&gt;本篇对HashMap实现的源码进行简单的分析。
所使用的HashMap源码的版本信息如下：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;* @(#)HashMap.java 1.73 07/03/13&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;* Copyright 2006 Sun Microsystems, Inc. All rights reserved.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;* SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;h3&gt;一.概述&lt;/h3&gt;

&lt;p&gt;在Java中每一个对象都有一个哈希码，这个值可以通过hashCode()方法获得。hashCode()的值和对象的equals方法息息相关，是两个对象的值是否相等的依据，所以当我们覆盖一个类的equals方法的时候也必须覆盖hashCode方法。&lt;/p&gt;

&lt;p&gt;例如String的hashCode方法为：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;off&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++];&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;可以看得出，一个字符串的哈希值为s[0]&lt;em&gt;31&lt;sup&gt;(n-1)&lt;/sup&gt; + s[1]&lt;/em&gt;31&lt;sup&gt;(n-2)&lt;/sup&gt; + … + s[n-1]，是一个整数。也就是说所有的字符串可以通过hashCode()将其映射到整数的区间中，由于在java中整数的个数是有限的（四个字节有正负，第一位为符号位-2&lt;sup&gt;31&lt;/sup&gt; ~ 2&lt;sup&gt;31&lt;/sup&gt; -1），当s[0]&lt;em&gt;31&lt;sup&gt;(n-1)&lt;/sup&gt; + s[1]&lt;/em&gt;31&lt;sup&gt;(n-2)&lt;/sup&gt; + … + s[n-1]足够大的时候可能会溢出，导致其变成负值。从上面的情况我们可以看出两个不同的字符串可能会被映射到同一个整数，发生冲突。因此java的开发人员选择了31这个乘数因子，尽量使得各个字符串映射的结果在整个java的整数域内均匀分布。&lt;/p&gt;

&lt;p&gt;谈完java对象的哈希码，我们来看看今天的主角HashMap，HashMap可以看作是Java实现的哈希表。HashMap中存放的是key-value对，对应的类型为java.util.HashMap.Entry，所以在HashMap中数据都存放在一个Entry引用类型的数组table中。这里key是一个对象，为了把对象映射到table中的一个位置，我们可以通过求余法来，所以我们可以使用 [key的hashCode % table的长度]来计算位置（当然在实际操作的时候由于需要考虑table上的key的均匀分布可能需要对key的hashCode做一些处理）。&lt;/p&gt;

&lt;h3&gt;二.源码解析&lt;/h3&gt;

&lt;p&gt;相关属性
首先肯定是需要一个数组table，作为数据结构的骨干。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;transient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;这边定义了一个Entry数组的引用。
继续介绍几个概念把&lt;/p&gt;

&lt;p&gt;capacity容量 是指数组table的长度 &lt;br/&gt;
loadFactor 装载因子，是实际存放量/capacity容量 的一个比值，在代码中这个属性是描述了装载因子的最大值，默认大小为0.75&lt;br/&gt;
threshold（阈值）代表hashmap存放内容数量的一个临界点，当存放量大于这个值的时候，就需要将table进行夸张，也就是新建一个两倍大的数组，并将老的元素转移过去。threshold = (int)(capacity * loadFactor);&lt;/p&gt;

&lt;p&gt;put方法详解&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;putForNullKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indexFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldValue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;recordAccess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;oldValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;modCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;addEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;在HashMap中我们的key可以为null，所以第一步就处理了key为null的情况。&lt;br/&gt;
当key为非null的时候，你也许会认为：恩，直接和table长度相除取模吧，但是这里没有，而是又好像做了一次哈希，这是为什么呢？这个还得先看indexFor(hash, table.length)方法，这个方法是决定存放位置的&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;indexFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;明眼的都可以发现，因为在HashMap中table的长度为2&lt;sup&gt;n&lt;/sup&gt; (我们把运算都换成二进制进行考虑)，所以h &amp;amp; (length-1)就等价于h%length，这也就是说，如果对原本的hashCode不做变换的话，其除去低length-1位后的部分不会对key在table中的位置产生任何影响，这样只要保持低length-1位不变，不管高位如何都会冲突，所以就想办法使得高位对其结果也产生影响，于是就对hashCode又做了一次哈希&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// This function ensures that hashCodes that differ only by&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// constant multiples at each bit position have a bounded&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// number of collisions (approximately 8 at default load factor).&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;当找到key所对应的位置的时候，对对应位置的Entry的链表进行遍历，如果以及存在key的话，就更新对应的value，并返回老的value。如果是新的key的话，就将其增加进去。modCount是用来记录hashmap结构变化的次数的，这个在hashmap的fail-fast机制中需要使用（当某一个线程获取了map的游标之后，另一个线程对map做了结构修改的操作，那么原先准备遍历的线程会抛出异常）。addEntry的方法如下&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;addEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;K&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucketIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bucketIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bucketIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;threshold&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;resize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;get方法&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;java&quot;&gt;   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;V&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getForNullKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hashCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Entry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;K&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexFor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)];&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
             &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)))&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;get方法其实就是将key以put时相同的方法算出在table的所在位置，然后对所在位置的链表进行遍历，找到hash值和key都相等的Entry并将value返回。&lt;/p&gt;
</description>
            <link>http:/demi-panda.com/2010/07/22/java-hashmap</link>
            <guid>http:/demi-panda.com/2010/07/22/java-hashmap</guid>
        </item>

        

        <item>
            <title>谈谈 Hash Table</title>
            <pubDate>Wed, 21 Jul 2010 00:00:00 +0800</pubDate>
            <description>&lt;h2&gt;一.数据结构&lt;/h2&gt;

&lt;p&gt;在我们编程的世界里数据的基本组织可以说有三种形式。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;结构体(或对象)&lt;/li&gt;
&lt;li&gt;数组&lt;/li&gt;
&lt;li&gt;链表&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;其他任何的数据组织形式都可以看作是这三种数据组织形式的组合变体。&lt;/p&gt;

&lt;p&gt;结构体(或对象)可以是基本数据类型或者其他结构体(或对象)的组合。结构体或对象一般用来描述一个复杂数据实体。&lt;br/&gt;
数组一般是一组同类型的变量的集合，在内存中表现为一片连续的空间，因为空间是连续的，且每一个数据单元占的内存空间的大小是相等的，所以可以根据地址的偏移对数据元素实现快速访问，但是当需要插入或者删除一个元素的时候，则需要对目标元素的之后的所有元素进行移动了。
链表的单个节点一般为结构体或者对象，因为链表的单个节点除了需要保存数据之外还需要维护它的相邻节点的关系，如果想获得链表中的某个节点的值，需要从链表的头结点开始遍历，直到找到需要的东西，而插入或者删除某个节点的话，需要找到相应的节点，修改其以及其相邻节点的相关指针的引用即可。&lt;br/&gt;
像其他的数据结构，比如 队列，栈，树，都可以通过数组或者链表来组织，并实现相应的操作功能。&lt;/p&gt;

&lt;h2&gt;二.Hash Table&lt;/h2&gt;

&lt;p&gt;这个世界上没有十全十美的东西，所以我们要学会取舍。任何技术的实现都没有最好的只要最合适的，也就说实现的最佳方案是和应用场景息息相关的。&lt;br/&gt;
很多时候，我们想对数据进行快速的存取（比如缓存的实现），并用一个key来标记自己存取的数据。我们可以把它叫做key-value的结构。&lt;br/&gt;
说到“快速”我们很快想到数组，因为数组可以在O(1)的时间复杂内完成指定位置元素的读写操作。&lt;br/&gt;
所以在理想状态，如果一个数组足够长，且存在一个函数可以将每一个key映射到唯一的一个数组下标，那么我们就可以很完美的解决问题。但往往资源都是有限的，我们没有那么大的空间，也不能设计一个无比负责的映射算法保证每一个key对应到一个唯一的数组下标。所以我们会选择一些折中的方案。&lt;/p&gt;

&lt;p&gt;hash table便是为解决这类问题而存在的。&lt;/p&gt;

&lt;h3&gt;1.哈希函数&lt;/h3&gt;

&lt;p&gt;Hash或者你可以翻译成散列或者杂凑，hash操作其本质上就是将一个数据映射成另一个数据，通常情况下原数据的长度比hash后的数据容量大。
这种映射的关系我们叫做哈希函数。&lt;/p&gt;

&lt;p&gt;一般情况下 哈希函数的输入可能的总数要远远多于哈希值所能表示的总数，所以就有可能两个不同的输入对应同一个哈希值，通常把具有不同关键码而具有相同哈希值的记录称作“同义词”。
在信息安全领域中也经常使用到哈希函数，不过需要使用的是单向哈希函数，就是无法通过哈希的结果反推出输入，所以经常应用于密码的加密，传输内容的完整性检查，在安全领域常用的哈希算法有 MD5，SHA1等。
在哈希表的应用中，哈希函数常用余数法进行，也就是通过求模的方式算出哈希值。&lt;/p&gt;

&lt;h3&gt;2.哈希表&lt;/h3&gt;

&lt;p&gt;哈希表是一种数据结构，实现key-value的快速存取。之前说过数组可以实现快速存取，所以哈希表肯定会使用到数组。在这里，我们把每一个数组的单元叫做一个bucket（桶）。&lt;/p&gt;

&lt;p&gt;构造哈希函数
这里哈希函数的作用就是将key映射到一个存储地址。所以构造一个哈希表我们得先构造哈希函数。
如果一个key哈希后对应地址中已经存放了值了，这种情况我们叫做哈希冲突（Hash collisions）。
如果存在一个哈希函数，使得每一个输入都能对应到唯一的一个存储单元中（没有冲突），那么这样的哈希函数我们可以叫它完美哈希函数（Perfect Hash Function，简称PHF)。
但为了哈希函数简单，运行速度快，往往不会使用完美哈希函数。所以冲突肯定会存在的，为了减少冲突，我们希望哈希函数的结果均匀的分布在地址单元的空间中。这样可以有效的减少冲突。&lt;/p&gt;

&lt;p&gt;装填因子Load factor a=哈希表的实际元素数目(n)/ 哈希表的容量(m) a越大，哈希表冲突的概率越大，但是a越接近0，那么哈希表的空间就越浪费。
一般情况下建议Load factor的值为0-0.7，Java实现的HashMap默认的Load factor的值为0.75，当装载因子大于这个值的时候，HashMap会对数组进行扩张至原来两倍大。&lt;/p&gt;

&lt;p&gt;冲突解决
既然冲突不可避免，那么我们就必须对冲突进行解决(总不能把之前的内容覆盖掉把),
解决冲突的方式主要分两类
开放定址法(Open addressing)这种方法就是在计算一个key的哈希的时候，发现目标地址已经有值了，即发生冲突了，这个时候通过相应的函数在此地址后面的地址去找，直到没有冲突为止。这个方法常用的有线性探测，二次探测，再哈希。
这种解决方法有个不好的地方就是，当发生冲突之后，会在之后的地址空间中找一个放进去，这样就有可能后来出现一个key哈希出来的结果也正好是它放进去的这个地址空间，这样就会出现非同义词的两个key发生冲突。&lt;/p&gt;

&lt;p&gt;链接法(Separate chaining)链接法是通过数组和链表组合而成的。当发生冲突的时候只要将其加到对应的链表中即可。&lt;/p&gt;

&lt;p&gt;与开放定址法相比，链接法有如下几个优点：&lt;/p&gt;

&lt;p&gt;①链接法处理冲突简单，且无堆积现象，即非同义词决不会发生冲突，因此平均查找长度较短；&lt;br/&gt;
②由于链接法中各链表上的结点空间是动态申请的，故它更适合于造表前无法确定表长的情况；&lt;br/&gt;
③开放定址法为减少冲突，要求装填因子α较小，故当结点规模较大时会浪费很多空间。而链接法中可取α≥1，且结点较大时，拉链法中增加的指针域可忽略不计，因此节省空间；&lt;br/&gt;
④在用链接法构造的散列表中，删除结点的操作易于实现。只要简单地删去链表上相应的结点即可。而对开放地址法构造的散列表，删除结点不能简单地将被删结点的空间置为空，否则将截断在它之后填人散列表的同义词结点的查找路径。这是因为各种开放地址法中，空地址单元(即开放地址)都是查找失败的条件。因此在 用开放地址法处理冲突的散列表上执行删除操作，只能在被删结点上做删除标记，而不能真正删除结点。&lt;/p&gt;

&lt;p&gt;当然链接法也有其缺点，拉链法的缺点是：指针需要额外的空间，故当结点规模较小时，开放定址法较为节省空间，而若将节省的指针空间用来扩大散列表的规模，可使装填因子变小，这又减少了开放定址法中的冲突，从而提高平均查找速度。&lt;/p&gt;
</description>
            <link>http:/demi-panda.com/2010/07/21/hash-table</link>
            <guid>http:/demi-panda.com/2010/07/21/hash-table</guid>
        </item>

        

        <item>
            <title>Why Asynchronous Web</title>
            <pubDate>Sat, 10 Jul 2010 00:00:00 +0800</pubDate>
            <description>&lt;p&gt;这两天在继续了解web应用中的异步处理问题。
然后看到了淘宝文初的博客http://blog.csdn.net/cenwenchu79
，他在几篇文章中多次提及jetty的continuation和servlet3的异步处理特性。看了之后收获不少。&lt;/p&gt;

&lt;h4&gt;异步处理的层次&lt;/h4&gt;

&lt;p&gt;异步处理在Web应用中可以分三个层次:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Socket数据传输的异步化，NIO&lt;/li&gt;
&lt;li&gt;HTTP请求的异步化（Jetty Continuation，Servlet 3）&lt;/li&gt;
&lt;li&gt;后台服务的异步化&lt;/li&gt;
&lt;/ul&gt;


&lt;h4&gt;异步处理的原因&lt;/h4&gt;

&lt;p&gt;我们肯定会思考，为何需要异步化呢？&lt;/p&gt;

&lt;p&gt;当访问的并发量很大的时候，如果Socket数据传输如果不做异步化处理，那么每一个socket连接都需要一个单独的线程来处理socket io，这样无疑会花费很多的系统资源，而且程序员需要考虑避免死锁,线程安全等问题。当java引入nio后，就有了异步的socket处理方式，将和socket关联的socketchannel注册到一个selector中，然后调用selector的select方法，当某一个socket有数据可读的时候，就会自动的反应到selector检测的结果中，这样便可以异步的进行处理。
当每一个请求的处理时间较长，http请求不做异步化的话，就会长期占用线程池中的线程（没有线程池或者线程池的最大线程数设置的过大的话，会产生内存消耗过大的问题），那么新的http请求将无法得到及时的响应，大部分的thread都进入阻塞状态。当引入jetty的continuation或者servlet3的Asynchronous ,可以将当前请求先暂停，让出处理线程，当原来的请求可以响应的时候，在答复原来的请求（continuation是将request重复提交一次）。
当后台业务处理组件资源紧张的时候，如果不做异步话就会出现资源争抢的情况，就会存在锁问题，性能降低，很多线程会处理阻塞状态。一个系统模块的服务的问题可能会导致整个系统的性能问题。
所以使用异步方式的根本原因就是：&lt;/p&gt;

&lt;p&gt;计算机的cpu或者内存等资源都是有限的，我们要控制系统线程数量，并且使得系统的整体性能不会因为某些阻塞时间较长的线程而急剧下降。&lt;/p&gt;
</description>
            <link>http:/demi-panda.com/2010/07/10/asynchronous-web</link>
            <guid>http:/demi-panda.com/2010/07/10/asynchronous-web</guid>
        </item>

        

        <item>
            <title>Git原理浅析</title>
            <pubDate>Sat, 05 Jun 2010 00:00:00 +0800</pubDate>
            <description>&lt;p&gt;git的底层从其本质上讲是一个内容寻址文件系统,然后基于这个内容寻址文件系统实现了一套vcs(版本控制系统)的高层接口,方便我们使用.当然git也提供了底层接口,便于我们使用之做出符合自己需求的系统.&lt;/p&gt;

&lt;p&gt;我们把文件内容交给git进行管理,总得有一个地方来存放这些内容是吧!
是的,在git中,所有的文件内容都保存在git仓库的objects目录中.&lt;/p&gt;

&lt;h4&gt;初始化git库&lt;/h4&gt;

&lt;p&gt;我们初始化一个git仓库有两种方式,git init和git –bare init
这两者的区别是,前者会在当前目录下生成一个.git目录(此目录即为git库的目录),而当前目录为我们的工作目录,一般是checkout后的文件,我们编程时所读写的内容都在此目录下.
后者的bare的意思就是裸的意思,也就是直接把当前目录当作git库的目录,这个一般用在远程git库上,因为我们在远程git库上没有checkout的需求,只是用作单纯的git库
git库还有个优点就是直接拷贝到另一个地方就可以直接用了,只要你的相应的机器上安装了git即可.&lt;/p&gt;

&lt;h4&gt;git对象&lt;/h4&gt;

&lt;p&gt;git中一个非常重要的概念就是git对象,我们可以把git系统想象成一个强大的key-value存储,每一个对象都对应着一个40位的哈希值.通过这个哈希值我们便可以很容易的取得对象(当然我们可以为这些哈希值取一些有意义的别名,方便我们使用).我们可以把这个哈希值看作指针.而对应的对象就是指针所指向的实体.对象和对象之间还可以通过通过指针进行一些关联的操作.
git对象可分为四种类型:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;blob对象 用来存放文件数据&lt;/li&gt;
&lt;li&gt;tree对象 对应着目录,tree的内容为blob对象的指针或者其他tree对象的指针&lt;/li&gt;
&lt;li&gt;commit对象 每一次commit都会产生一个新的commit对象,其包含了一个指向tree对象的指针,指向前一次commit对象的指针,还包含了commit的时间,作者和注释等信息,就相当于为项目做了一次snapshot,通过commit对象我们可以跟踪到前一次commit对象,这样就可以实现log功能了&lt;/li&gt;
&lt;li&gt;tag对象 一种特殊的commit对象&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;git库目录
接下来分析git库目录中各个文件的作用&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;bash&quot;&gt;Lukes-MacBook:test.git Luke&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls -al
total 32
drwxr-xr-x  11 Luke  staff   374 Jun  4 20:21 .
drwxr-xr-x  24 Luke  staff   816 Jun  4 20:21 ..
-rw-r--r--   1 Luke  staff    23 Jun  4 20:21 HEAD &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;当前分支的指针&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
drwxr-xr-x   2 Luke  staff    68 Jun  4 20:21 branches
-rw-r--r--   1 Luke  staff    85 Jun  4 20:21 config
-rw-r--r--   1 Luke  staff    73 Jun  4 20:21 description
drwxr-xr-x  12 Luke  staff   408 Jun  4 20:21 hooks &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;可以实现在特定操作的前或者后触发一些动作&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
drwxr-xr-x   3 Luke  staff   102 Jun  4 20:21 info
drwxr-xr-x  64 Luke  staff  2176 Jun  4 20:21 objects &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;blob,tree,commit,tag 对象&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
-rw-r--r--   1 Luke  staff    85 Jun  4 20:21 packed-refs
drwxr-xr-x   4 Luke  staff   136 Jun  4 20:21 refs &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;指向各个分支的指针&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;objects保存的时候,以40位哈希值的前两位作为子目录的名称,后38位作为对象的文件名
git系统会定期对所有的objects进行打包操作,这样可以减少磁盘占用空间
git中最新版本的都是直接保存的,以前版本是通过引用最新的文件以及差异进行获取的,这是因为大都数时候我们对最新的分支代码更为关注&lt;/p&gt;
</description>
            <link>http:/demi-panda.com/2010/06/05/git-internals</link>
            <guid>http:/demi-panda.com/2010/06/05/git-internals</guid>
        </item>

        
    </channel>
</rss>
